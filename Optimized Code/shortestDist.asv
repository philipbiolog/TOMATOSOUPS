function dist = shortestDist(cam, pos)
%{
%% Objective:
Calculates the shortest distance between a point and a line in 3D space

%% Inputs:
cam:        Data capture and calibration information at a singular time
            step. This includes calibration, FOV, frame size, x&z position,
            and inertial offset.

pos:        1x3 Position Vector to compare to the line given by cam's pointing

%% Outputs:
dist:       shortest distance between pos and the line of cam

%}

pix_x = cam.res(1);
pix_z = cam.res(2);

x0 = cam.res(1)/2;
z0 = cam.res(2)/2;

pix2deg_x = cam.FOV(1)/pix_x;
pix2deg_z = cam.FOV(2)/pix_z;

p = (cam.x - x0) * pix2deg_x;
q = (z0 - cam.z) * pix2deg_z;

R = rotation321(cam.att);

l = [tan(p); 1; tan(q)] * norm([tan(p); 1; tan(q)]);
l = R * l;      % Unit Vector of bearings line relative to the camera in global coordinate frame

projection = proj(pos-cam.pos, l);

dist = norm(projection);

end