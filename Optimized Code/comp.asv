clear; clc; close all;

% Compare Vicon to Estimate


%% VICON data
VD.test1 = readmatrix("Vicon/TOMATOSOUPS Day2 Trial.csv");
VD.test2 = readmatrix("Vicon/TOMATOSOUPS Day2 Trial 1.csv");
VD.test3 = readmatrix("Vicon/TOMATOSOUPS Day2 Trial 2.csv");
VD.test4 = readmatrix("Vicon/TOMATOSOUPS Day2 Trial 3.csv");
VD.test5 = readmatrix("Vicon/TOMATOSOUPS Day2 Trial 4.csv");

names = fieldnames(VD);

for i = 1:5
    VICON.(names{i}).t = VD.(names{i})(10:end,1) / 100;
    VICON.(names{i}).pos = (VD.(names{i})(10:end,6:8))/1000;

end

%% Camera data

Test1_cam1 = camData('1Test2Vid1', CameraInformation_2C(1));
Test1_cam2 = camData('2Test2Vid1', CameraInformation_2C(2));
Test1_cam_array = [Test1_cam1, Test1_cam2];

Test2_cam1 = camData('1Test2Vid2', CameraInformation_2C(1));
Test2_cam2 = camData('2Test2Vid2', CameraInformation_2C(2));
Test2_cam_array = [Test2_cam1, Test2_cam2];

Test3_cam1 = camData('1Test2Vid3', CameraInformation_2C(1));
Test3_cam2 = camData('2Test2Vid3', CameraInformation_2C(2));
Test3_cam_array = [Test3_cam1, Test3_cam2];

Test4_cam1 = camData('1Test2Vid4', CameraInformation_2C(1));
Test4_cam2 = camData('2Test2Vid4', CameraInformation_2C(2));
Test4_cam_array = [Test4_cam1, Test4_cam2];

Test5_cam1 = camData('1Test2Vid5', CameraInformation_2C(1));
Test5_cam2 = camData('2Test2Vid5', CameraInformation_2C(2));
Test5_cam_array = [Test5_cam1, Test5_cam2];

%% Position Estimation

position1 = posEstimate(Test1_cam_array);
position2 = posEstimate(Test2_cam_array);
position3 = posEstimate(Test3_cam_array);
position4 = posEstimate(Test4_cam_array);
position5 = posEstimate(Test5_cam_array);

time.test1 = (0:(1/24):(191/24))';
time.test2 = (0:(1/24):(227/24))';
time.test3 = (0:(1/24):(357/24))';
time.test4 = (0:(1/24):(157/24))';
time.test5 = (0:(1/24):(135/24))';

%% Offset

offset = [1.65314, 5.16225, 0.152644] - [1.92997, -0.0677321, 1.88748];     %
offset = offset + [-.226063, 5.06432, .327245] - [-.221153, 5.09527, .435934];
Truth1 = VICON.test1.pos  + ones(size(VICON.test1.pos)).*offset;
Truth2 = VICON.test2.pos  + ones(size(VICON.test2.pos)).*offset;
Truth3 = VICON.test3.pos  + ones(size(VICON.test3.pos)).*offset;
Truth4 = VICON.test4.pos  + ones(size(VICON.test4.pos)).*offset;
Truth5 = VICON.test5.pos  + ones(size(VICON.test5.pos)).*offset;


%% Plotting Figures


figure()
plot3(position1(1, :), position1(2,:), position1(3,:))
hold on
plot3(Truth1(:,1),Truth1(:,2),Truth1(:,3))
legend('TOMATOSOUPS','VICON')
xlabel('X-axis')
ylabel('Y-axis')
zlabel('Z-axis')
axis equal
title('Test 1 3d position')

figure()
plot3(position2(1, :), position2(2,:), position2(3,:))
hold on
plot3(Truth2(:,1),Truth2(:,2),Truth2(:,3))
legend('TOMATOSOUPS','VICON')
xlabel('X-axis')
ylabel('Y-axis')
zlabel('Z-axis')
axis equal
title('Test 1 3d position')

figure()
plot3(position3(1, :), position3(2,:), position3(3,:))
hold on
plot3(Truth3(:,1),Truth3(:,2),Truth3(:,3))
legend('TOMATOSOUPS','VICON')
xlabel('X-axis')
ylabel('Y-axis')
zlabel('Z-axis')
axis equal
title('Test 1 3d position')

figure()
plot3(position4(1, :), position4(2,:), position4(3,:))
hold on
plot3(Truth4(:,1),Truth4(:,2),Truth4(:,3))
legend('TOMATOSOUPS','VICON')
xlabel('X-axis')
ylabel('Y-axis')
zlabel('Z-axis')
axis equal
title('Test 1 3d position')

figure()
plot3(position5(1, :), position5(2,:), position5(3,:))
hold on
plot3(Truth5(:,1),Truth5(:,2),Truth5(:,3))
legend('TOMATOSOUPS','VICON')
xlabel('X-axis')
ylabel('Y-axis')
zlabel('Z-axis')
axis equal
title('Test 1 3d position')

%% Error Estimation

modpos1 = interp1(time.test1,position1',0:0.01:time.test1(end),'pchip');
modpos2 = interp1(time.test2,position2',0:0.01:time.test2(end),'pchip');
modpos3 = interp1(time.test3,position3',0:0.01:time.test3(end),'pchip');
modpos4 = interp1(time.test4,position4',0:0.01:time.test4(end),'pchip');

evec1 = VICON.test1.pos(260:end,:)-modpos1(1:end-26, :);
t1 = (0:0.01:time.test1(end))';
error1 = (evec1(:,1).^2 + evec1(:,2).^2+evec1(:,3).^2).^(1/2);

evec2 = VICON.test2.pos(256:end,:)-modpos2;
error2 = (evec2(:,1).^2 + evec2(:,2).^2+evec2(:,3).^2).^(1/2);

evec3 = VICON.test3.pos(226:end,:)-modpos3;
error3 = (evec3(:,1).^2 + evec3(:,2).^2+evec3(:,3).^2).^(1/2);

evec4 = VICON.test4.pos(191:end,:)-modpos4;
error4 = (evec4(:,1).^2 + evec4(:,2).^2+evec4(:,3).^2).^(1/2);













